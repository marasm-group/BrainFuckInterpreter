;
; BrainFuck interpreter
;
#json
{
    "author":"SR3u",    
    "dependencies":["conio"],
    "init":""
}
#end
$brainfuck ;; Interprets !-terminated brainfuck program passed through console
@brainfuck_endless_loop
push 30000 ;; basic space between memory and program
push 0     ;; basic program location
call $brainfuck_load_console
call $brainfuck_interpret
out conio_charPort '\n' ;; print program end message
out conio_charPort 'E'
out conio_charPort 'N'
out conio_charPort 'D'
out conio_charPort '.'
out conio_charPort '\n'
jmp @brainfuck_endless_loop
halt 0
$brainfuck_load_console ;; Loads !-terminated brainfuck program from console, into memory
var ptr ;; memory pointer  (offset)
var pp  ;; program pointer (counter)
pop pp
pop ptr
var cmd ;; current command
var tmp 
mov tmp pp
@brainfuck_store_loop ;; store program in RAM
in cmd conio_charPort
store pp cmd
add pp pp 1
sub cmd cmd '!'
jnz cmd @brainfuck_store_loop
store pp 0  ;; create some space between program and data
add pp pp 1
store pp 0
add pp pp 1
add ptr ptr pp
;add ptr ptr 30000 ;; Some more space
mov pp tmp ;; reset program pointer
push ptr   ;; true memory pointer
push pp    ;; true program pointer
ret
$brainfuck_interpret ;; Interprets 0-terminated brainfuck program, from memory
var ptr ;; memory pointer
var pp  ;; program pointer (counter)
pop pp
pop ptr
var cmd ;; current command
var tmp
var lss ;; loop stack size
@brainfuck_loop ;; while cmd != 0
load cmd pp
sub tmp cmd '>'
jnz tmp @brainfuck_0
add ptr ptr 1
jmp @brainfuck_iter
@brainfuck_0
sub tmp cmd '<'
jnz tmp @brainfuck_1
sub ptr ptr 1
jmp @brainfuck_iter
@brainfuck_1
sub tmp cmd '+'
jnz tmp @brainfuck_2
load tmp ptr
add tmp tmp 1
store ptr tmp
jmp @brainfuck_iter
@brainfuck_2
sub tmp cmd '-'
jnz tmp @brainfuck_3
load tmp ptr
sub tmp tmp 1
store ptr tmp
jmp @brainfuck_iter
@brainfuck_3
sub tmp cmd '.'
jnz tmp @brainfuck_4
load tmp ptr
out conio_charPort tmp
jmp @brainfuck_iter
@brainfuck_4
sub tmp cmd ','
jnz tmp @brainfuck_5
in tmp conio_charPort
store ptr tmp
jmp @brainfuck_iter
@brainfuck_5
sub tmp cmd '['
jnz tmp @brainfuck_6
load tmp ptr
jz tmp @brainfuck_while_noloop
jlz tmp @brainfuck_while_noloop
push pp
add lss lss 1
jmp @brainfuck_iter
@brainfuck_while_noloop
var tp  ;; temporary program pointer
mov tp pp
@brainfuck_while
add tp tp 1
load tmp tp
sub tmp tmp ']'
jnz tmp @brainfuck_while
mov pp tp
delv tp
jmp @brainfuck_iter
@brainfuck_6
sub tmp cmd ']'
jnz tmp @brainfuck_7
jz lss @brainfuck_iter
pop pp
sub pp pp 1
sub lss lss 1
jmp @brainfuck_iter
@brainfuck_7
@brainfuck_iter
add pp pp 1
jnz cmd @brainfuck_loop
ret
halt -1 ;; prevent further execution (if any)